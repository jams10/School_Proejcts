
process-run.py 라는 이름의 이 프로그램은 CPU에서 프로세스가 실행 될 때 
프로세스 상태가 어떻게 변하는지 보여줍니다. 챕터에서 서술한 바와 같이,
프로세스는 다음과 같이 몇 가지 다른 상태를 갖습니다.

  RUNNING(실행중) - 프로세스가 지금 당장 CPU를 사용하고 있음.
  READY(준비)     - 프로세스가 지금 당장 CPU를 사용할 가능성이 있음.
                    그러나 안타깝게도 다른 프로세스가 CPU를 사용하고 있음.
  WAITING(대기)   - 프로세스가 I/O(입출력)에서 대기 중임. 
                   (예를 들어, 디스크에 대해 입출력을 요청한 경우)
  DONE(종료)      - 프로세스가 실행을 끝마침.
  
이 과제에서, 우리는 프로그램이 실행됨에 따라 이러한 프로세스 상태들이 어떻게 변하는지 
볼 것이고, 이에 따라 이런 것들이 어떻게 작동하는지 조금 더 잘 알게 될 것입니다.

프로그램을 실행하고 해당 프로그램에 대한 옵션을 가져오려면, 이렇게 하세요:

prompt> ./process-run.py -h

만약 작동되지 않는다면, 이처럼 명령어 앞에 "python"을 입력하세요:

prompt> python process-run.py -h

그러면 이와 같은 것이 보일 것입니다:

사용법: process-run.py [options]

옵션들:
  -h, --help              이와 같은 도움말들을 보여주고 종료
  -s SEED, --seed=SEED    랜덤 시드
  -l PROCESS_LIST, --processlist=PROCESS_LIST
                          X1:Y1,X2:Y2,... 형식의 쉼표(,)로 구분된 실행할 프로세스의 목록.
                          여기서 X는 프로세스가 실행해야 하는 명령의 수
                          Y는 명령이 CPU를 사용하거나 입출력을 요청할 가능성(0~100)
  -L IO_LENGTH, --iolength=IO_LENGTH
                          입출력에 걸리는 시간
  -S PROCESS_SWITCH_BEHAVIOR, --switch=PROCESS_SWITCH_BEHAVIOR
                          프로세스 간 전환 시기 : 
                          SWITCH_ON_IO, SWITCH_ON_END
  -I IO_DONE_BEHAVIOR, --iodone=IO_DONE_BEHAVIOR
                          입출력이 끝났을 때의 behavior의 타입 : 
                          IO_RUN_LATER, IO_RUN_IMMEDIATE
  -c                      정답을 계산
  -p, --printstats        끝에 통계를 출력함; -c flag와 사용해야 함.
                          (그렇지 않으면 통계는 출력되지 않는다.)

이해해야 할 가장 중요한 옵션은 PROCESS_LIST(-l 혹은 -processlist flags로 지정)입니다.
PROCESS_LIST는 각각의 실행 중인 프로그램(혹은 프로세스)이 수행할 작업을 정확하게 명시합니다.
프로세스는 명령들로 구성되어 있고, 각 명령은 
아래 두개의 작업중 하나를 수행할 수 있습니다:
  - CPU를 사용
  - 입출력을 요청 (요청 후 완료될 때 까지 대기)

프로세스가 CPU를 사용할 때(입출력은 전혀 하지 않고), 그것은 단지 CPU에서 
실행하거나(RUNNING 상태), 실행 준비(READY 상태) 사이를 번갈아갑니다.
예를 들어, 여기 하나의 프로그램만 실행되는 간단한 실행이 있습니다.
그리고, 이 프로그램은 오직 CPU만 사용합니다.(입출력은 요청하지 않음)

prompt> ./process-run.py -l 5:100
이러한 프로세스들을 실행 했을때 어떤일이 발생할지 추적해 봅시다:
Process 0
  cpu
  cpu
  cpu
  cpu
  cpu
  
중요 행동들:
  시스템은 현재 프로세스가 완료되거나 입출력을 요청했을 때 전환됩니다.
  입출력 후에는, 입출력을 요청한 프로세스가 나중에 실행 됩니다.(그 프로세스의 차례가 되면)
  
prompt>

여기서, 우리는 "5:100"으로 프로세스를 지정해주었는데, 이는 5개의 명령으로 이루어져 있으며
각 명령이 CPU 명령일 확률이 100% 라는 것을 의미합니다.

여러분을 위해 답을 계산해주는 -c flag를 사용하면 프로세스에 어떤일이 생기는지 알 수 있습니다.


prompt> ./process-run.py -l 5:100 -c
Time     PID: 0        CPU        IOs
  1     RUN:cpu          1
  2     RUN:cpu          1
  3     RUN:cpu          1
  4     RUN:cpu          1
  5     RUN:cpu          1
  
이 결과는 그렇게 흥미롭지는 않습니다: 프로세스는 실행(RUN) 상태에서 간단히 수행되고
완료되고 나서, CPU를 계속 사용하여 전체 실행과정에서 CPU를 바쁘게 작동하도록 유지하고 
어떠한 입출력도 수행하지 않습니다.

두개의 프로세스를 실행하여 조금 더 복잡하게 만들어 봅시다:

prompt> ./process-run.py -l 5:100,5:100
이러한 프로세스들을 실행 했을때 어떤일이 발생할지 추적해 봅시다:
Process 0
  cpu
  cpu
  cpu
  cpu
  cpu

Process 1
  cpu
  cpu
  cpu
  cpu
  cpu
  
중요 행동들:
  스케쥴러는 현재 프로세스가 완료되거나 입출력을 요청했을 때 전환됩니다.
  입출력 후에는, 입출력을 요청한 프로세스가 나중에 실행 됩니다.(그 프로세스의 차례가 되면)
  
이 케이스에서는, 두 개의 서로 다른 프로세스들이 실행되고, 다시 각 프로세스들은 CPU를 사용합니다.
운영체제가 프로세스들을 실행시켰을때 무슨일이 일어났는지 알아봅시다:

prompt> ./process-run.py -l 5:100,5:100 -c
Time     PID: 0     PID: 1        CPU        IOs
  1     RUN:cpu      READY          1
  2     RUN:cpu      READY          1
  3     RUN:cpu      READY          1
  4     RUN:cpu      READY          1
  5     RUN:cpu      READY          1
  6        DONE    RUN:cpu          1
  7        DONE    RUN:cpu          1
  8        DONE    RUN:cpu          1
  9        DONE    RUN:cpu          1
 10        DONE    RUN:cpu          1
 
위에서 볼 수 있듯이, 0의 프로세스 아이디(PID)를 가진 첫번째 프로세스가 실행되고, 
그 동안에 프로세스 1은 0번 프로세스가 끝날 때 까지 실행 준비 상태가 됩니다.
0번 프로세스가 끝났을 때, 이 프로세스는 종료(DONE) 상태로 옮겨가고, 1번 프로세스가 실행됩니다.
1번 프로세스가 끝나면, 추적이 종료됩니다.
 
몇 가지 질문을 하기전에 한 가지 예를 더 살펴봅시다.
이 예시에서는, 프로세스는 단지 입출력 요청을 합니다.
우리는 여기서 -L 플래그로 입출력이 완료하는데 5 time unit(5*1024 microseconds)이 걸리도록 명시했습니다.
 
prompt> ./process-run.py -l 3:0 -L 5
이러한 프로세스들을 실행 했을때 어떤일이 발생할지 추적해 봅시다:
Process 0
  io-start
  io-start
  io-start
  
 중요 행동들:
  시스템은 현재 프로세스가 완료되거나 입출력을 요청했을 때 전환됩니다.
  입출력 후에는, 입출력을 요청한 프로세스가 나중에 실행 됩니다.(그 프로세스의 차례가 되면)

실행 추적이 어떻게 될 거라고 생각하시나요? 알아 봅시다:

prompt> ./process-run.py -l 3:0 -L 5 -c
Time     PID: 0        CPU        IOs
  1  RUN:io-start          1
  2     WAITING                     1
  3     WAITING                     1
  4     WAITING                     1
  5     WAITING                     1
  6* RUN:io-start          1
  7     WAITING                     1
  8     WAITING                     1
  9     WAITING                     1
 10     WAITING                     1
 11* RUN:io-start          1
 12     WAITING                     1
 13     WAITING                     1
 14     WAITING                     1
 15     WAITING                     1
 16*       DONE
 
보이는것 처럼, 프로그램은 3개의 입출력을 요청합니다. 각 입출력이 요청 되었을 때,
프로세스는 대기(WAITING) 상태로 이동하고, 장치가 바쁘게 입출력을 서비스 하는 동안,
CPU는 가만히 있게 됩니다.
 
한 번 통계를 출력해 봅시다.(위와 같은 명령어에 -p flag를 추가합니다.)
전반적인 행동들을 한 번 봅시다:
 
Stats: Total Time 16
Stats: CPU Busy 3 (18.75%)
Stats: IO Busy  12 (75.00%)

보이는것 처럼, 프로그램은 16 클럭이 걸리는데, 그러나 CPU는 20% 미만의 시간 동안 작동했습니다.
반면에, 입출력 장치는 꽤 많은 시간 동안 작동했습니다. 일반적으로, 우리는 모든 장치들을 계속해서
돌아가도록 하고 싶어하는데, 이를 통해 자원들을 더 잘 사용할 수 있기 때문입니다.

다른 중요 플래그들에 대해 더 알아봅시다:
  -s SEED, --seed=SEED the random seed
    이는 사용자로 하여금 다른 많은 작업들을 무작위로 만드는 방법을 제공합니다.
   
  -L IO_LENGTH, --iolength=IO_LENGTH
    이 flag는 입출력이 완료하는데 얼마나 걸리는지를 결정합니다.(기본 값은 5 ticks)
  
  -S PROCESS_SWITCH_BEHAVIOR, --switch=PROCESS_SWITCH_BEHAVIOR
                            프로세스 간 전환 시기: SWITCH_ON_IO, SWITCH_ON_END
    이는 우리가 언제 다른 프로세스로 전환할 것인지를 결정합니다.
    - SWITCH_ON_IO, 시스템은 프로세스가 입출력을 요청했을 때 전환.
    - SWITCH_ON_END, 시스템은 현재 프로세스가 끝났을 때에만 전환.
    
  -I IO_DONE_BEHAVIOR, --iodone=IO_DONE_BEHAVIOR
                            입출력이 끝났을 때의 행동 타입 : IO_RUN_LATER, IO_RUN_IMMEDIATE
    이는 입출력이 끝난뒤, 언제 프로세스를 실행시킬지 결정합니다.
    - IO_RUN_IMMEDIATE: 당장 이 프로세스로 전환.
    - IO_RUN_LATER: 자연스럽게 차례가 되면 이 프로세스로 전환.
    (예를 들어, 프로세스-전환 행동에 의존)
    
이제 더 공부하기 위해 챕터 뒤쪽에 있는 문제들을 풀어보세요.
                           
